#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('mqtt-cc:server');
var http = require('http');

// Get Me Started example from:
// https://github.com/mcollina/mosca/wiki/Mosca-basic-usage

// Step (A) Get Mosca
const mosca = require('mosca');

// Step (B) Configure pubsubsettings
var pubsubsettings = {
  type: 'mongo',
  url: 'mongodb://localhost:27017/mqtt',
  pubsubCollection: 'ascoltatori',
  mongo: {}
};

// Step (C) pass pubsubsettings to server and start server
var moscaSettings = {
  port: 1883,
  backend: pubsubsettings
};
var moscaServer = new mosca.Server(moscaSettings);
moscaServer.on('ready', setup);

function setup() {
  console.log('Mosca server up and running');
}

// Sending data from mosca to clients
var moscaMessage = {
  topic: '/frontdoor/outside/temp',
  payload: 'Outside temp is fucking cold',
  qos: 0,
  retain: false
};
moscaServer.publish(moscaMessage, function() {
  console.log('message published');
});

// Receiving data from clients
// fires when a message is published
moscaServer.on('published', function(packet, client) {
  console.log('Published', packet);
  console.log('Client', client.id);
});

// mosca using Mosquitto
// var pubsubsettings = {
//   type: 'mqtt',
//   json: false,
//   mqtt: require('mqtt'),
//   host: '127.0.0.1',
//   port: 1883
// };

// mosca using Mongo with ascoltatore
// const ascoltatore = {
//   type: 'mongo',
//   url: 'mongodb://localhost:27017',
//   pubsubCollection: 'ascoltatori',
//   mongo: {}
// };

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var httpServer = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

httpServer.listen(port);
httpServer.on('error', onError);
httpServer.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = httpServer.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('Http server listening on ' + bind);
}

// Create websockets server
var message = '';
var WebSocketServer = require('ws').Server;
var wsServer = new WebSocketServer({ port: 8010 });
if (wsServer) {
  console.log('WebSocketServer started and listening on port 8010');
}
wsServer.on('connection', function(ws) {
  ws.on('message', function(message) {
    console.log('Received from client: %s', message);
    ws.send('Server recieved from client: ' + message);
  });
});
